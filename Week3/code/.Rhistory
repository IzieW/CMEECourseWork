q
q()
getwd()
q()
code
d <- read.table("~Documents/SparrowSize.txt", header=TRUE)
d <- read.table("~Downloads/SparrowSize.txt", header=TRUE)
d <- read.table("~/Downloads/SparrowSize.txt", header=TRUE)
str(d)
names(d)
head(d)
length(d$Tarsus)
hist(d$Tarsus)
mean(d$Tarsus,na.rm = TRUE)
median(d$Tarsus,na.rm = TRUE)
mode(d$Tarsus,na.rm = TRUE)
mode(d$Tarsus)
par(mfrow = c(2,2))
hist(d$Tarsus, breaks = 3, col="grey")
hist(d$Tarsus, breaks = 10, col="grey")
hist(d$Tarsus, breaks = 30, col="grey")
hist(d$Tarsus, breaks = 100, col="grey")
head(table(d$Tarsus))
d$Tarsus.rounded<-round(d$Tarsus,digits=1)
head(d$Tarsus.rounded)
getwd()
setwd("Documents/CMEECourseWork/Week3/code"
)
getwd()
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
head(MyData)
str(MyData)
fix(MyData)
fix(MyData)
Data <- t(MyData)
fix(Data)
head(Data)
Data[Data==""] = 0
TempData <- as.data.frame(MyData[-1,], stringsAsFactors = FALSE)
TempData <- as.data.frame(Data[-1,], stringsAsFactors = FALSE)
colnames(TempData) <- Data[1,]
require(reshape2)
?melt
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"))
fix(MyWrangledData)
rm(list=ls())
require(tidyverse)
MyData <- readr::read_csv("../data/PoundHillData.csv", colnames = FALSE)
MyData <- readr::read_csv("../data/PoundHillData.csv", col_names = FALSE)
spec(MyData)
MyData
glimpse(MyData)
d <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
head(d)
head(MyData)
?rownames_to_column()
d2 <- t(d)
d2
MyData
pivot_wider(MyData, names_from = X1, values_from = X2:X12)
MyData
MyData <- t(MyData)
MyData <- replace_na(MyData, "0")
glimpse(MyData)
MyData
class(MyData)
type(d2)
class(d2)
as.tibble(MyData)
TempData <- as.tibble(MyData)
rename(TempData, [1, ] = MyData[1, ])
TempData <- as.tibble(MyData, .name_repair = make.names(c(MyData[1,])))
TempData <- as.tibble(MyData, .name_repair = vec_as_names(MyData[1,])
)
names <- c(MyData[1,])
names
TempData <- as.tibble(MyData, .name_repair = names))
TempData <- as.tibble(MyData, .name_repair = names )
?.name_repair
TempData <- as.tibble(MyData, .name_repair = make.names)
TempData
TempData <- as.tibble(MyData, .name_repair = vect_as_names(names))
TempData <- as.tibble(MyData, .name_repair = vec_as_names(names))
TempData <- as.tibble(MyData, .name_repair = vec_as_names(names))
makenames
TempData <- as.tibble(MyData[-1, ])
TempData
TempData <- as.tibble(MyData[-1, ])
colnames(TempData) <- MyData[1,]
TempData
Pivot_longer(TempData, 5:45, names_to = "Species", values_to = "Count")
require(tidyverse)
pivot_longer(TempData, 5:45, names_to = "Species", values_to = "Count")
pivot_longer(TempData, !c("Cultivation", "Block", "Plot", "Quadrat"), names_to = "Species", values_to = "Count")
tidyr::pivot_longer(TempData, 5:45, names_to = "Species", values_to = "Count")
MyWrangledData <- tidyr::pivot_longer(TempData, 5:45, names_to = "Species", values_to = "Count")
glimpse(MyWrangledData)
MyWrangledData
MyData
MyData <- readr::read_csv("../data/PoundHillData.csv", col_names = FALSE) # no headers
MyData
MyData %>% group_by(X1) %>% pivot_wider(MyData, names_from = X1, values_from = !X1)
MyWrangledData
as_factor(MyWrangledData, c("Cultivation", "Block", "Plot", "Quadrat"))
MyWrangledData[,Cultivation]
MyWrangledData[Cultivation]
MyWrangledData[,1]
MyWrangledData$Cultivation
as_factor(MyWrangledData$Cultivation)
MyWrangledData
type(MyWrangledData$Cultivation)
is.factor(MyWrangledData$Cultivation)
MyWrangledData$Cultivation <- as_factor(MyWrangledData$Cultivation)
is.factor(MyWrangledData$Cultivation)
MyWrangledData[, "Block"] <- as_factor(MyWrangledData[, "Block"])
is.factor(MyWrangledData$Block)
MyWrangledData[, "Block"] <- as_factor(MyWrangledData[, "Block"])
is.factor(MyWrangledData$Block)
MyWrangledData$Block <- as_factor(MyWrangledData$Block)
is.factor(MyWrangledData$Block)
is.integer(MyWrangledData$Count)
MyWrangledData$Block <- as.integer(MyWrangledData$Block)
?select
MyWrangledData %>% as.factor(select(!Count))
MyWrangledData %>% select(!Count) %>% as.factor()
?mutate
mutate(MyWrangledData, as_factor(Block))
is.factor(MyWrangledData$Block)
mutate(MyWrangledData, Block = as.factor(Block))
is.factor(Block)
is.factor(MyWrangledData$Block)
MyWrangledData <- mutate(MyWrangledData, Block = as.factor(Block))
is.factor(MyWrangledData$Block)
MyWrangledData
MyWrangledData$Block <- as.integer(MyWrangledData$Block)
is.factor(MyWrangledData$Block)
MyWrangledData <- mutate(MyWrangledData, !Count = as.factor(!Count))
MyWrangledData %>% select(MyWrangledData, !Count) %>% sapply(as.factor)
select(MyWrangledData, !Count)
sapply(select(MyWrangledData, !Count), FUN=as.factor)
is.factor(MyWrangledData$Block)
MyWrangledData <- sapply(select(MyWrangledData, !Count), FUN=as.factor)
is.factor(MyWrangledData$Block)
MyWrangledData
MyWrangledData <- mutate(MyWrangledData, Cultivation = as.factor(Cultivation),
Block = a.factor(Block), Plot = as.factor(Plot),
Quadrat = as.factor(Quadrat), Count = as.integer(Count))
class(MyWrangledData)
MyData <- readr::read_csv("../data/PoundHillData.csv", col_names = FALSE) # no headers
MyData <- t(MyData)
############# Replace species absences with zeros ###############
MyData <- replace_na(MyData,"0")
############# Convert raw matrix to data frame ###############
TempData <- as.tibble(MyData[-1, ])
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
MyWrangledData <- tidyr::pivot_longer(TempData, 5:45, names_to = "Species", values_to = "Count")
MyWrangledData
MyWrangledData$Block <- as.factor(MyWrangledData$Block)
MyWrangledData
is.factor(MyWrangledData$Block)
MyWrangledData <- mutate(MyWrangledData, Cultivation = as.factor(Cultivation),
Block = a.factor(Block), Plot = as.factor(Plot),
Quadrat = as.factor(Quadrat), Count = as.integer(Count))
MyWrangledData <- mutate(MyWrangledData, Cultivation = as.factor(Cultivation),
Block = as.factor(Block), Plot = as.factor(Plot),
Quadrat = as.factor(Quadrat), Count = as.integer(Count))
for (i in 1:5){
as.factor(MyWrangledData[,i])
}
MyWrangledData[,1]
colnames(MyWrangledData)
list <- colnames(MyWrangledData)
for (i in list){}
for (i in list){
is.factor(MyWrangledData$i)
}
for (i in list){
MyWrangledData %>% is.factor(i)
}
MyWrangledData[,2]
for (i in list){
is.factor(MyWrangledData[,i])
}
for (i in 1:5){
is.factor(MyWrangledData[,i])
}
is.factor(MyWrangledDaTA)
select(MyWrangledData, Count)
select(MyWrangledData, !Count)
select(MyWrangledData, !Count)
as.factor(select(MyWrangledData, !Count))
?mutate_if
MyWrangledData
MyWrangledData %>% mutate_at(c("Block", "Plot"), as.factor)
MyWrangledData$Block <- as.integer(MyWrangledData$Block)
is.factor(MyWrangledData$Block)
MyWrangledData %>% mutate_at(c("Block", "Plot"), as.factor)
is.factor(MyWrangledData$Block)
source("DataWrangTidy.R")
MyWrangledData
dplyr::glimpse(MyWrangledData)
source("DataWrangTidy.R")
source("DataWrangTidy.R")
source("DataWrangTidy.R")
source("DataWrangTidy.R")
source("DataWrangTidy.R")
source("DataWrangTidy.R")
source("DataWrangTidy.R")
filter(MyData, Count >100)
source("DataWrangTidy.R")
MyWrangledData
source("DataWrangTidy.R")
source("DataWrangTidy.R")
print(MyWrangledData)
source("DataWrangTidy.R")
