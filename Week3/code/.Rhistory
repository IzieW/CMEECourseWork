getwd()
ls
ls()
a <- 4 # store 4 as variable a
a # display it
a * a
a_squared <- a * a
a_squared
sqrt(a_squared)
v <- c(0, 1, 2, 3, 4)
v # Display the vector-valued variable you created
?c
is.vector(v)
mean(v)
8
var(v)
var(v) # variance 
median(v) # median
sum(v) # sum
prod(v + 1) # sum all elements
length(v)
wing.width.cm <- 1.2 # Using dot notation 
wing.length.cm <- c(4.7, 5.2, 4.8)
wing.
wing.
li = list(c(1,2,3))
class(li)
li[3]
li[[3]]]
li[[3]]
li [[2]]
li[[2]]
li = list + c(3, 4)
li[[3]]
li
li[[1]]
li
li[[2]] = list(c(4,5,6))
li
rm li
rm(list=ls())
li
li = list(c(1,2,3)
li = list(c(1,2,3))
l
li
v <- TRUE
v
class(v)
v <- 3.2
class(v)
v <- 2L 
class(v)
v <- "A string"
class(v)
b <- NA 
class(b)
is.na(b)
b <- 0.0
b
b <- 0/0
b
is.nan(b)
b <- 5/10
b
b <- 5/0
b
is.nan(b)
?is.nan
?is.NA
?is.nan
?is.na
is.infinite(b)
is.finite(b)
is.finite(0/0)
as.integer(3.1)
as.numeric(4)
as.roman(155)
as.character(155) # same as convert to string
as.logical(5)
q()
as.logical(5)
as.logical(0)
1E4
1e4
5e-2
1E4^2
1E4
1E4^2
1e+08
1/ 3/ 1e8
a <- T
a
q()
a <- 5
is.vector(a)
v1 <- c(0.02, 0.5, 1)
v2 <- c("a", "bc", "def", "ghij")
v3 <- c(TRUE, TRUE, FALSE)
v1;v2;v3
v1 <- c(0.02, TRUE, 1)
v1
v1 <- c(0.02, 'Mary', 1)
v1
mat1 <- matrix(1:25, 5, 5)
mat1
mat1 <- matrix(1:10, 5, 5)
mat1
mat1 <- matrix(1:25, 5, 5)
mat1
mat1 <- matrix(1:25, 5, 5, byrow=TRUE)
mat1
dim(mat1) # get the size of a matrix
arr1 <- array(1:50,c(5, 5, 2))
arr1[,,1]
print(arr1)
arr1[,,2]
Col1 <- 1:10
Col1
Col2 <- LETTERS[1:10]
Col2
Col3 <- runif(10) # 10 random numbers from a uniform distribution
Col3
Col3 <- runif(10) # 10 random numbers from a uniform distribution
Col3
MyDF <- data.frame(Col1, Col2, Col3)
MyDF
names(MyDF) <- c("MyFirstColumn", "My Second Column", "My.Third.Column")
MyDF
MyDF$MyFirstColumn
MyDF$My Second Column
MyDF$MySecondColumn
colnames(MyDF)
colnames(MyDF)[2] <- "MySecondColumn"
MyDF
MyDF$My.Third.Column
MyDF[,1]
MyDF[1,]
MyDF[1,1]
MyDF[c("MyFirstColumn","My.Third.Column")] # show two specific columns only 
class(MyDF)
str(MyDF)
head(MyDF)
tail(MyDF)
MyList <- list(species=c("Quercus robar","Fraxinus excelsior"), age=c(123, 94))
MyList
MyList[[1]]
MyList[[1]][1]
MyList[[2]]
MyList[[2]][2]
MyList$species
MyList[["species"]]
MyList$species[1]
pop1<-list(species='Cancer magister',latitude=48.3,longitude=-123.1,startyr=198,endyr=1985,po=c(303,402,101,607,802,35))
pop1
pop1<-list(lat=19,long=57,pop=c(100,101,99))
pop2<-list(lat=56,long=-120,pop=c(1,4,7,7,2,1,2))
pop3<-list(lat=32,long=-10,pop=c(12,11,2,1,14))
pops<-list(sp1=pop1,sp2=pop2,sp3=pop3)
pops
pops$sp1 # check out species 1
pops$sp1["pop"]
pops[[2]]$lat #latitude of second species 
pops[[3]]$pop[3]<-102 #change population of third species at third time step 
pops
MyMat = matrix(1:8, 4, 4)
MyMat
MyDF = as.data.frame(MyMat)
MyDf
MYDF
MyDF
object.size(MyMat)
object.size(MyDF)
years <- 1990:2009
years
years <-2009:1990
years
seq(1, 10, 0.5)
seq(1, 10, 0.5)
MyVar <- c('a','b','c','d','e')
MyVar[1] # Show elements in first position 
MyVar[4] # Show elements in fourth position
MyVar[c(3,2,1)] # reverse order
MyVar[c(1,1,5,5)] #repeat indices
MyVar
v <- c(0, 1, 2, 3, 4) # Create a vector named v 
v[3] # access one element
v[1:3] # access sequential elements
v[-3] # remove elements
v[c(1, 4)] # access non-sequential indices 
mat1 <- matrix(1:25,5,5,byrow=TRUE) #create matrix
mat1
mat1[1,2]
mat1[1,2:4]
mat1[1:2,2:4]
mat1[1,]
mat1[,1]
a <- c(1,5) + 2
a
x <- c(1,2); y <- c(5,3,9,2)
x;y
x + y
x + c(y,1)
v <- c(0, 1, 2, 3, 4)
v2 <- v*2 # multiply whole vector by 2
v2
v * v2 #element-wise product 
t(v) # transpose the vector 
v %*% t(v) # matrix/vector product
v3 <- 1:7 # assing using sequence 
v3
v4 <- c(v2, v3) # concatenate vectors
v4
species.name <- "Quercus robur" #you can also use single quotes
species.name
paste("Quercus", "robur")
paste("Quercus", "robur",sep = "") #Get rid of space
paste("Quercus, "robur",sep=", ") #insert comma to separate
paste("Quercus", "robur",sep=", ") #insert comma to separate
paste('Year is:', 1990:2000)
log(v)
v
exp(v)
v
set.seed(1234567)
rnorm(1)
rnorm(10)
set.seed(1234567)
rnorm(11)
dir()
getwd
getwd()
q()
Mydata <- read.csv("../data/trees.csv")
ls () # Check that MyData has appeared 
Mydata
class(MyData)
class(Mydata)
head(Mydata)
str(Mydata)
Mydata <- read.csv("../data/trees.csv", header = F) # Import ignoring headers
head(Mydata)
Mydata <- read.table("../data/trees.csv", sep=',', header = TRUE) # another way
head(Mydata)
Mydata <- read.csv("../data/trees.csv", skip = 5) # skip first 5 lines
Head(Mydata)
head(Mydata)
Mydata <- read.csv("../data/trees.csv", skip = 5, header = TRUE) # skip first 5 lines
head(Mydata)
Mydata <- read.csv("../data/trees.csv", skip = 5 - header) # skip first 5 lines
write.csv(MyData, "../results/MyData.csv") 
write.csv(Mydata, "../results/MyData.csv")
dir("../results/") # Check if it worked
write.table(Mydata[1,], file = "../results/MyData.csv",append=TRUE) # append
cat("../results/MyData.csv")
write.csv(Mydata, "../results/MyData.csv", row.names=TRUE) # write row names
write.table(Mydata, "../results/MyData.csv", col.names=FALSE #ignore col names 
write.table(Mydata, "../results/MyData.csv", col.names=FALSE #ignore col names 
write.table(Mydata, "../results/MyData.csv", col.names=FALSE #ignore col names)
write.table(Mydata, "../results/MyData.csv", col.names=FALSE #ignore col names)
write.table(Mydata, "../results/MyData.csv", col.names=FALSE) #ignore col names
MyData <- read.csv("../results/MyData.csv")
MyData
source("basic_io.R")
source("basic_io.R")
getwd
getwd()
source("basicio.R")
source("basic_io.R")
source("basic_io.R")
source("basic_io.R")
a <- TRUE
if (a == TRUE){
print ("a is TRUE")
}else{
print ("a is FALSE")
}
z <- runif(1) ## Generate a uniformly distributed random number
if (z <= 0.05) [print ("Less than a half")}
if (z <= 0.05) {print ("Less than a half")}
z <- runif(1)
if (z <= 0.5) {
    print ("Less than a half")
    }
z
for (i in 1:10){
    j <- i * i
    print(paste(i, " squared is", j ))
}
for(species in c['Heliodoxa rubinoides',
                  'Boissonneua jardini',
                 'Sula nebouxii' )){
for(species in c['Heliodoxa rubinoides',
                  'Boissonneua jardini',
for(species in c('Heliodoxa rubinoides',
                  'Boissonneua jardini',
                 'Sula nebouxii' )){
   print(paste('THe species is', species))
}
v1 
v1 <- c("a","bc","def")
for (in in v1){
for (i in v1)[
for (i in v1){
    print(i)
}
i <- 0
while (i < 10){
    i <- i+1
    print(i^2)
}
source(control_flow.R)
source("control_flow.R")
ls
ls()
source(boilerplate.R)
source(boilerplate)
source("boilerplate.R")
ls()
class(MyFunction)
# Checks if an integer is even
is.even <- function(n = 2){
    if (n %% 2 == 0)
    {
        return(paste(n,'is even!'))
    }
    return(paste(n,'is odd!'))
}
is.even(6)
# Checks if a number is a power of two
is.power2 <- function(n = 2){
    if (log2(n) %% 1 ==0)
    {
        return(paste(n,"is a power of 2"))
    }
    return(paste(n, "is not a power of 2!"))
}
is.power2(4)
# Checks if a number is prime
is.prime <- function(n){
    if (n == 0){
        return(paste(n,"is a zero!"))
    }
    if (n == 1){
        return(paste(n," is just a unit!"))
    }
    ints <- 2:(n-1)
    if (all(n%%ints!=0)){
        return(paste(n,"is a prime!"))
    }
    return(paste(n,'is a composite!'))
}
is.prime(3)
source("R_conditionals.R")
source("R_conditionals.R")
source("R_conditionals.R")
source(R_conditionas.R)
source("R_conditionals.R")
is.prime(3)
is.power2(4)
source("R_conditionals.R")
TreeHeight <- function(degrees, distance){
    radians <- degrees * pi / 180
    height <- distance * tan(radians)
    print(paste("Tree height is:", height))
    return(height)
}
TreeHeight(37, 40)
source("TreeHeight.R")
getwd()
source("TreeHeight.R")
NoPreallocFun <- function(x){
    a <- vector() # empty vector
    for (i in 1:x) {
        a <- c(a, i)
        print(a)
        print(object.size(a))
    }
}
NoPreallocFun(10)
source("preallocate.R")
source("apply1.R")
M
source("apply2.R")
popn <- rnorm(1000) # Generate the population
myexperiment <- function(popn,n){
    pop_sample <- sample(popn, n, replace = FALSE)
    return(mean(pop_sample))
}
?sample
?num
?hist
source("sample.R")
source("sample.R")
source("sample.R")
source("sample.R")
x <- 1:20 #vector 
x
y <- factor(rep(letters[1-5], each = 4))
y
tapply(x, y, sum)
y <- factor(rep(letters[1:5], each = 4))
tapply(x, y, sum)
y
attach(iris)
iris
by(iris[,1:2], iris$Species, colMeans)
by(iris[,1:2], iris$Petal.Width, colMeans)
replicate(10, runif(5))
?exp
exp(1)
exp(2)
exp(3)
source(Ricker.R)
getwd()
source("Ricker.R")
?rep
source("browser.R")
n
n
n
c
c
q
A
Q
source("browser.R")
Q
?stop
source("Try.R")
Traceback
source("Try.R")
source("Try.R")
source("Try.R")
class(result)
result
source("Try.R")
install.packages(c(("tidyverse"))
install.packages(c(("tidyverse")))
sudo apt install r-cran-tidyverse
sudo apt install r-cran-tidyverse
CSTree <- read.csv("../data/trees.csv") # pun on csv 
CSTree
CSTree[,1]
CSTREE[1,1]
CSTree[11]
CSTree[1,1]
CSTree[1]
CSTree{,1]
CSTree[,1]
CSTree[1,]
csvTree[1]
CSVTree[1]
CSTree[1]
?leng
?lens
